// backend/src/routes/auth.routes.js
const router = require('express').Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const usersDb = require('../utils/usersDb'); // 'Simula' a conexão com o banco de dados
// Rota de login
router.post('/login', async (req, res) => {
    // Pega o email e a senha que vieram no corpo da requisição
    const { email, password } = req.body;
    // Busca o usuário na nossa simulação de banco de dados

    const user = usersDb.find(u => u.email === email);
    if (!user) return res.status(401).json({ message: 'Credenciais inválidas.' });

    // Compara a senha digitada com a senha criptografada (o hash)
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: 'Credenciais inválidas.' });

    // Se as credenciais estiverem corretas, cria o token
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    // Retorna o token como uma resposta JSON para o frontend
    res.json({ token });
});
module.exports = router; // A rota de registro e outras rotas públicas também seriam adicionadas aqui.